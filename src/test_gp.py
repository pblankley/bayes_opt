import numpy as np
from gp import SquaredExp, Matern52, GP

def test_sq_exp():
    np.random.seed(1)
    x = np.random.randn(4,2)
    thetas = np.ones((4,1))
    cov = SquaredExp(x,x,thetas)
    truth = np.array([[ 1.        ,  0.08865319,  0.17984223,  0.98174488],
                       [ 0.08865319,  1.        ,  0.17804411,  0.07194706],
                       [ 0.17984223,  0.17804411,  1.        ,  0.20742471],
                       [ 0.98174488,  0.07194706,  0.20742471,  1.        ]])
    assert(np.allclose(truth,cov))
    
def test_matern52():
    np.random.seed(1)
    x = np.random.randn(4,2)
    thetas = np.ones((4,1))
    cov = Matern52(x,x,thetas)
    truth = np.array([[ 1.        ,  0.09385559,  0.15774471,  0.90743858],
                     [ 0.09385559,  1.        ,  0.15651871,  0.08132151],
                     [ 0.15774471,  0.15651871,  1.        ,  0.17650257],
                     [ 0.90743858,  0.08132151,  0.17650257,  0.99999998]])
    assert(np.allclose(truth,cov))
    

def test_gp_posterior_mean():
    np.random.seed(1)
    N,n = 10,50
    f = lambda x: np.sin(0.9*x).flatten()
    X = np.random.uniform(-5, 5, size=(N,1))
    Xtest = np.linspace(-5, 5, n).reshape(-1,1)
    y = f(X) 
    gg = GP(X,y,SquaredExp)
    means,stds = gg.draw_posterior(Xtest)
    
    # Truth
    truth_w_amp = np.array([ 0.97747843,  0.92801464,  0.8421295 ,  0.72564975,  0.58485026,
                            0.42557284,  0.25310022,  0.07255763, -0.11058994, -0.29037391,
                            -0.46054977, -0.61511956, -0.74878009, -0.8571387 , -0.93671199,
                            -0.98488341, -0.99996876, -0.98138256, -0.92976226, -0.8469161 ,
                            -0.73560791, -0.59934607, -0.44236028, -0.26979264, -0.08790889,
                            0.09597378,  0.27404025,  0.43893576,  0.58478051,  0.70780207,
                            0.80630608,  0.88002808,  0.92921485,  0.95390484,  0.95375894,
                            0.92850549,  0.87876231,  0.80682625,  0.71704621,  0.61558496,
                            0.50962728,  0.40629285,  0.31158927,  0.2296853 ,  0.16264252,
                            0.1105856 ,  0.07217603,  0.04520872,  0.02717184,  0.01566882])
    truth_wo_amp = np.array([ 0.97747881,  0.9280133 ,  0.84212777,  0.72564838,  0.58484964,
                            0.42557311,  0.25310077,  0.07255815, -0.11059045, -0.2903741 ,
                           -0.46054964, -0.61511891, -0.74877903, -0.85713763, -0.93671136,
                           -0.98488339, -0.99996912, -0.98138283, -0.92976209, -0.84691561,
                           -0.73560778, -0.59934723, -0.44236341, -0.26979762, -0.08791465,
                            0.09596907,  0.27403859,  0.43893862,  0.58478829,  0.70781399,
                            0.8063204 ,  0.88004262,  0.92922752,  0.95391414,  0.95376412,
                            0.92850662,  0.87876003,  0.80682154,  0.71704014,  0.61557849,
                            0.50962113,  0.40628748,  0.31158489,  0.22968193,  0.16264006,
                            0.1105839 ,  0.0721749 ,  0.045208  ,  0.02717141,  0.01566857])
    assert(np.allclose(means,truth_w_amp))

def test_posterior_std():
    np.random.seed(1)
    N,n = 10,50
    f = lambda x: np.sin(0.9*x).flatten()
    X = np.random.uniform(-5, 5, size=(N,1))
    Xtest = np.linspace(-5, 5, n).reshape(-1,1)
    y = f(X) 
    gg = GP(X,y,SquaredExp)
    means,stds = gg.draw_posterior(Xtest)
    
    truth_w_amp = np.array([ 0.00051135,  0.02789469,  0.03035989,  0.01885591,  0.00522062,
                            0.0029083 ,  0.00380686,  0.00079263,  0.00176809,  0.0006114 ,
                            0.00393134,  0.00821062,  0.00949661,  0.00708516,  0.00286895,
                            0.00060152,  0.00116545,  0.00045644,  0.00113109,  0.00068696,
                            0.00052085,  0.00190584,  0.00966993,  0.02235275,  0.03400532,
                            0.03484755,  0.01511902,  0.03019475,  0.09791714,  0.1763326 ,
                            0.24785099,  0.29377081,  0.29926187,  0.25695839,  0.16826618,
                            0.04236725,  0.10644258,  0.26209209,  0.4099235 ,  0.53897186,
                            0.64308011,  0.72082591,  0.77453072,  0.80877429,  0.82887475,
                            0.83970816,  0.84505851,  0.84747696,  0.84847705,  0.84885545])
    truth_wo_amp = np.array([ 0.00053365,  0.03285021,  0.03575242,  0.02220112,  0.00613642,
                            0.00342362,  0.00447097,  0.00088717,  0.0020644 ,  0.00066696,
                            0.0046169 ,  0.00965905,  0.01117174,  0.00832916,  0.00335787,
                            0.00065612,  0.00134542,  0.00046033,  0.0013023 ,  0.00075323,
                            0.00056182,  0.00219526,  0.01134216,  0.02627927,  0.04001067,
                            0.04101688,  0.0177977 ,  0.03555159,  0.1153019 ,  0.20765216,
                            0.29188545,  0.34597387,  0.35244832,  0.30263124,  0.19817675,
                            0.04989806,  0.12536526,  0.30868728,  0.4828022 ,  0.63479518,
                            0.75741407,  0.8489834 ,  0.91223724,  0.95256955,  0.97624402,
                            0.98900371,  0.99530541,  0.99815387,  0.99933178,  0.99977747])
    assert(np.allclose(stds,truth_w_amp))

test_sq_exp()
test_matern52()
test_posterior_std()
test_gp_posterior_mean()
